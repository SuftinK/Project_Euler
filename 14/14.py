"""Следующая повторяющаяся последовательность определена для множества натуральных чисел:

n → n/2 (n - четное)
n → 3n + 1 (n - нечетное)

Используя описанное выше правило и начиная с 13, сгенерируется следующая последовательность:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
Получившаяся последовательность (начиная с 13 и заканчивая 1) содержит 10 элементов. Хотя это до сих пор и не доказано (проблема Коллатца (Collatz)), предполагается, что все сгенерированные таким образом последовательности оканчиваются на 1.

Какой начальный элемент меньше миллиона генерирует самую длинную последовательность?

Примечание: Следующие за первым элементы последовательности могут быть больше миллиона."""

import time

start = time.time()

def collatz(n:int) -> int:
	if n % 2 == 0:
		return int(n / 2)
	else:
		return 3 * n + 1

maximum = 1
answer_list = list()
for n in range(999999, 3, -1):
	li = list()
	li.append(n)
	nn = n
	while nn != 1:
		nn = collatz(nn)
		li.append(nn)
		l = len(li)
	if l > maximum:
		maximum = l
		answer_list = li[:]

print(f"Число {answer_list[0]} имеет самый большой ряд Уоллатца = {maximum}. Вот он : \n{answer_list}")

print(f"Алгоритм работал {round(time.time() - start, 2)} сек.")