"""Су Доку
Су Доку (по-японски значит место числа) - название популярной головоломки. Ее происхождление неизвестно, однако нужно отдать должное Леонарду Эйлеру, который придумал идею похожей, но более сложной головоломки под названием Латинские Квадраты. Целью Су Доку является заменить пустые места (или нули) в сетке 9 x 9 цифрами таким образом, чтобы в каждой строке, колонке и квадрате 3 x 3 содержались все цифры от 1 до 9. Ниже приведен пример типичной исходной головоломки и ее решение.

p096_1.png     p096_2.png
Правильно составленная головоломка Су Доку имеет единственное решение и может быть решена с помощью логики, однако иногда необходимо применять метод "гадай и проверяй", чтобы исключить неверные варианты (существует очень спорное мнение по этому поводу). Сложность поиска определяет уровень головоломки. Приведенный выше пример считается легким, так как его можно решить прямой дедукцией.

6 КБ текстовый файл sudoku.txt (щелкнув правой кнопкой мыши, выберите Save Link/Target As...) содержит пятьдесят разных головоломок Су Доку различной сложности, но каждая имеет единственное решение (первая головоломка в файле рассмотрена выше).

Решив все пятьдесят головоломок, найдите сумму трехзначных чисел, находящихся в верхнем левом углу каждого решения. Например, 483 является трехзначным числом, находящимся в верхнем левом углу приведенного выше решения.
"""
import time
import string


def sudocu_print(l: list) -> None:
    """Функция печатает Судоку и определяет кол-во не расгаданных чисел"""
    zero_count = 0
    for i_row in l:
        if "0" not in i_row:
            zero_count += 1
        else:
            zero_count += i_row.count("0")
        print(i_row)
    if zero_count == 0:
        print("Судоку решена")
        return False
    else:
        print(f"Судоку не решена.\nОсталось определить {zero_count} чисел.\n\n")
        return True


def col_set(l: list, n: int) -> set:
    """Эта функция для конкретной клетки судоку возвращает множество значений по вертикали
    input: sudoku list
    input: номер колонки от 0 до 8 """
    res_set = set()
    for i in range(9):
        res_set.add(int(l[i][n]))
    return res_set


def row_set(l: list, r: int) -> set:
    """Ээта функция для конкретной клетки  судоку возвращает множество значений по горизонтали строки"""
    # res_set = set()
    res = [int(x) for x in l[r]]
    res_set = set(res)
    return res_set

def s_set(l:list, s_numb:str) -> set:
    res_set = set()
    temp_dict = {"s1": {l[0][0], l[0][1], l[0][2], l[1][0], l[1][1], l[1][2], l[2][0], l[2][1], l[2][2]},
                 "s2": {l[0][3], l[0][4], l[0][5], l[1][3], l[1][4], l[1][5], l[2][3], l[2][4], l[2][5]},
                 "s3": {l[0][6], l[0][7], l[0][8], l[1][6], l[1][7], l[1][8], l[2][6], l[2][7], l[2][8]},
                 "s4": {l[3][0], l[3][1], l[3][2], l[4][0], l[4][1], l[4][2], l[5][0], l[5][1], l[5][2]},
                 "s5": {l[3][3], l[3][4], l[3][5], l[4][3], l[4][4], l[4][5], l[5][3], l[5][4], l[5][5]},
                 "s6": {l[3][6], l[3][7], l[3][8], l[4][6], l[4][7], l[4][8], l[5][6], l[5][7], l[5][8]},
                 "s7": {l[6][0], l[6][1], l[6][2], l[7][0], l[7][1], l[7][2], l[8][0], l[8][1], l[8][2]},
                 "s8": {l[6][3], l[6][4], l[6][5], l[7][3], l[7][4], l[7][5], l[8][3], l[8][4], l[8][5]},
                 "s9": {l[6][6], l[6][7], l[6][8], l[7][6], l[7][7], l[7][8], l[8][6], l[8][7], l[8][8]}
                 }

    return temp_dict.get(s_numb)



s_dict = {(0, 0): "s1", (0, 1): "s1", (0, 2): "s1",
          (1, 0): "s1", (1, 1): "s1", (1, 2): "s1",
          (2, 0): "s1", (2, 1): "s1", (2, 2): "s1",
          (0, 3): "s2", (0, 4): "s2", (0, 5): "s2",
          (1, 3): "s2", (1, 4): "s2", (1, 5): "s2",
          (2, 3): "s2", (2, 4): "s2", (2, 5): "s2",
          (0, 6): "s3", (0, 7): "s3", (0, 8): "s3",
          (1, 6): "s3", (1, 7): "s3", (1, 8): "s3",
          (2, 6): "s3", (2, 7): "s3", (2, 8): "s3",
          (3, 0): "s4", (0, 1): "s4", (0, 2): "s4",
          (4, 0): "s4", (1, 1): "s4", (1, 2): "s4",
          (5, 0): "s4", (2, 1): "s4", (2, 2): "s4",
          (3, 3): "s5", (3, 4): "s5", (3, 5): "s5",
          (4, 3): "s5", (4, 4): "s5", (4, 5): "s5",
          (5, 3): "s5", (5, 4): "s5", (5, 5): "s5",
          (3, 6): "s6", (3, 7): "s6", (3, 8): "s6",
          (4, 6): "s6", (4, 7): "s6", (4, 8): "s6",
          (5, 6): "s6", (5, 7): "s6", (5, 8): "s6",
          (6, 0): "s7", (6, 1): "s7", (6, 2): "s7",
          (7, 0): "s7", (7, 1): "s7", (7, 2): "s7",
          (8, 0): "s7", (8, 1): "s7", (8, 2): "s7",
          (6, 3): "s8", (6, 4): "s8", (6, 5): "s8",
          (7, 3): "s8", (7, 4): "s8", (7, 5): "s8",
          (8, 3): "s8", (8, 4): "s8", (8, 5): "s8",
          (6, 6): "s9", (6, 7): "s9", (6, 8): "s9",
          (7, 6): "s9", (7, 7): "s9", (7, 8): "s9",
          (8, 6): "s9", (8, 7): "s9", (8, 8): "s9"
          }

print(f"Проверка {s_dict.get((1, 4))}")

with open("p096_sudoku.txt", "r") as file:
    f = file.read()
f_list = f.split("\n")

# for i in range(1, 500, 10):
for i in range(1, 10, 10):
    sudoku = f_list[i: i + 9]
    sudocu_print(sudoku)

    sud = sudoku[:]
print(f"Возвращаю множество строки {row_set(sud, 3)}")

sudocu_print(sud)
base = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
# zero = {0}
for step in range(1, 5):
    for i_row in range(9):
        # Создаем множество этой строчки
        # i_row_set = set([int(x) for x in sud[i_row]])
        # base_i_row = base - i_row_set
        # print(f"Множество без элементов строки: {base_i_row}.")
        for i_col in range(9):
            print(f"Проверка {s_dict.get((i_row, i_col))}")
            if sud[i_row][i_col] != "0":
                print(f"Ячейка {i_row + 1},{i_col + 1} = {sud[i_row][i_col]}. Пропускаем разгаданное число")
                continue
            print(f"Ячейка {i_row + 1},{i_col + 1} = {sud[i_row][i_col]}")
            # print(i_row_set)
            i_col_set = col_set(sud, i_col)
            i_row_set = row_set(sud, i_row)
            print("Множество колонки: ", i_col_set)
            print("Множество строки:  ", i_row_set)
            base_i_row_i_col = base - i_col_set - i_row_set
            print(f"Множество без элементов строки и колонки: {base_i_row_i_col}.")
            if len(base_i_row_i_col) == 1:
                # меняем строку на новую с вновь найденным элементом
                i_str_value = str(base_i_row_i_col.pop())
                new_row = sud[i_row][:i_col] + i_str_value + sud[i_row][i_col + 1:]
                sud[i_row] = new_row
    print(f"{step} круг. ")
    sudocu_print(sud)

# Тест s_set функции
print("Это тест вновь написанной функции", s_set(sud, "s8"))